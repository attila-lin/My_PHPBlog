学习Unix（一）
======

##code 1

看的是《APUE》，主要是些基本函数的介绍。

    #include "apue.h"
    #define BUFFSIZE 4096

    int main(){
    	int n;
    	char buf[BUFFSIZE];
    
    	while((n = read(STDIN_FILENO, buf, BUFFSIZE)) > 0)
    		if(write(STDOUT_FILENO, buf, n) != n)
    			err_sys("write error");
    
    		if(n < 0)
    			err_sys("read error");
    
    		exit(0);
    }

STDIN_FILENO and STDOUT_FILENO, from &lt;unistd.h>.
STDIN_FILENO--标准输入，一般指从键盘输入
STDOUT_FILENO--标准输出，一般指输出到显示器
STDERR_FILENO--标准出错输出


###read()

>表头文件 #include<unistd.h>

>定义函数: ssize_t read (int fd,void * buf ,size_t count);

>函数说明：read()会把参数fd 所指的文件（标准输出中读取）传送count个字节到buf指针所指的内存中。若参数count为0，则read()不会有作用并返回0。

>返回值为实际读取到的字节数，如果返回0，表示已到达文件尾或是无可读取的数据。

>若read()中定义每次读取100个字节，文件中一共有300个字节，那么read读取两次后文件中只剩下30个字节，则第3次读取时，read()返回值=30，下一次读取时read返回0

###write()

>定义函数：ssizet_t write (int fd, const *buf, size_t count)

>函数说明：write()会把参数buf所指的内存中的count个字节写到参数filedes所指的文件内中。

>返回值：成功write()会返回实际写入的字节数。当有错误发生时则返回-1，错误代码存入errno中。

>参数fd 可以是 STDIN_FILENO/文件，

>表头文件 #include<unistd.h>


##code 2
    
    #include "apue.h"
    #include <sys/wait.h>
    
    int main(){
    	char buf[MAXLINE];
    	pid_t pid;
    	int status;
    
    // 函数原型：
    //        int fgetc(FILE *stream);
    //        char *fgets(char *s, int size, FILE *stream);
    //        int getc(FILE *stream);
    //        int getchar(void);
    //        char *gets(char *s);
    
    // 函数说明：
    //        fgetc() ：从读取文件流中读取下一个字符，并将其以无符号数返回，或者返回文件末尾标志或错误标志。 unsigned char cast to an int,
    //        getc()  ：和fgetc差不多，只是在读取的时候会检查文件流。
    //        getchar() ：和getc(stdin)等效。
    //        gets() ：从stdin中读取一行字符串，直到一行结束或是到文件末尾，字符串以’\0’结尾。但是不会检查是否有溢出。
    //        fgets() 读取少于size长度的字符，直到新的一行开始或是文件结束，最后会在读取的字符串最后一个字符后加一个结束字符’\0’ 。
    
    // 关于返回值：
    //        fgetc(),  getc() and getchar()如果读取成功返回的是读取到的字符，并且将字符转换为无符号数或是文件末尾，读取失败则返回错误值。
    //        gets() and fgets() 如果读取成功返回的是读取到的字符，无数据读取或读取错误返回NULL。
    
    	printf("%% ");
    	while(fgets(buf,MAXLINE,stdin) != NULL){
    		if(buf[strlen(buf) - 1] == '\n')
    			buf[strlen(buf) - 1] = 0;
    
    		if((pid = fork()) < 0){
    			err_sys("fork error");
    		}else if(pid == 0){
    			//int execlp(const char * file,const char * arg,...,(char *)0);
    			//execlp()会从PATH 环境变量所指的目录中查找符合参数file的文件名，找到后便执行该文件，
    			//然后将第二个以后的参数当做该文件的argv[0]、argv[1]……，最后一个参数必须用空指针(NULL)作结束。
    			execlp(buf,buf,(char *)0);
    			err_ret("could't execute: %s",buf);
    			exit(127);
    		}
    		pid = waitpid(pid, &status,0);
    		printf("child pid %d\n",pid);
    
    		//if((pid = waitpid(pid, &status,0)) < 0)
    		if(pid < 0)
    			err_sys("waitpid error");
    		printf("%% ");
    	}
    	exit(0);
    } 
    
##code3

    #include "apue.h"
    #include <errno.h>
    
    int main(int argc, char *argv[]){
    	fprintf(stderr, "EACES: %s\n",strerror(EACCES));
    	errno = ENOENT;
    	perror(argv[0]);
    	exit(0);
    }
    
![pic1](Selection_004.png "pic1")

EACES: Permission denied
ENOENT: No such file or directory

errno.h 的位置 
/usr/src/linux-headers-3.8.0-21/include/linux
/usr/src/linux-headers-3.8.0-21/include/uapi/asm-generic等


##code4

    #include "apue.h"
    #include <sys/wait.h>
    
    static void sig_int(int);
    
    
    int main(){
    	char buf[MAXLINE];
    	pid_t pid;
    	int status;
    
    
    // 函数名: signal
    // 表头文件#include<signal.h>
    // 功 能：设置某一信号的对应动作
    // 函数原型：void (*signal(int signum,void(* handler)(int)))(int);
    // 或者：typedef void(*sig_t) ( int );
    // sig_t signal(int signum,sig_t handler);
    	
    	if(signal(SIGINT, sig_int) == SIG_ERR)
    		err_sys("signal error");
    
    
    	printf("%% ");
    	while(fgets(buf,MAXLINE,stdin) != NULL){
    		if(buf[strlen(buf) - 1] == '\n')
    			buf[strlen(buf) - 1] = 0;
    
    		if((pid = fork()) < 0){
    			err_sys("fork error");
    		}else if(pid == 0){
    			execlp(buf,buf,(char *)0);
    			err_ret("could't execute: %s",buf);
    			exit(127);
    		}
    		pid = waitpid(pid, &status,0);
    		printf("child pid %d\n",pid);
    
    		//if((pid = waitpid(pid, &status,0)) < 0)
    		if(pid < 0)
    			err_sys("waitpid error");
    		printf("%% ");
    	}
    	exit(0);
    } 
    
    void sig_int(int signo){
    	printf("interrupt\n %% ");
    }
    
当程序收到信号SIGINT（就是中断）时，调用函数sig_int()

![pic2](Selection_005.png "pic2")